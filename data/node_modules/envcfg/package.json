{
  "author": {
    "name": "Garrett Johnson"
  },
  "name": "envcfg",
  "description": "stupid simple environment aware configuration",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git@github.com:gjohnson/envcfg.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "clone": "~0.1.9"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": " [![Build Status](https://secure.travis-ci.org/gjohnson/envcfg.png?branch=master)](http://travis-ci.org/gjohnson/envcfg)\n\n# envcfg\n\nenvcfg is an environment aware configuration module. It is inspired by settings and cfg.\n\nIt can load configurations from json files, modules or just plain objects. Do note that when loading from disk `readFileSync` or `require` will be used.\n\n## Install\n*****\n\n```shell\nnpm install envcfg\n```\n\n## Usage\n*****\n\nThe configuration can be broken down by environment, with the special `*` key which can be used to share common settings across all environments.\n\n## Files\n*****\n\nFiles can be loaded by passing the path to file that follows the structure above. If the file ends in `.json` it will be assumed it is a JSON file and will be parsed accordingly.\n\n```javascript\nvar envcfg = require('envcfg');\nvar config = envcfg(__dirname + '/path/to/config.json');\n```\n\n```javascript\n{\n\t\"*\": {\n\t\t\"foo\": \"foo-*\",\n\t\t\"buz\": \"buzz-*\"\n\t},\n\t\"development\": {\n\t\t\"bar\": \"bar-development\"\n\t},\n\t\"test\": {\n\t\t\"foo\": \"foo-test\",\n\t\t\"bar\": \"bar-test\"\n\t}\n}\n```\n\n## Modules\n*****\n\nLoading modules by path is not different than loading JSON besides the naming convention. Just be sure the module sets it's `module.exports` to the configuration.\n\n```javascript\nvar envcfg = require('envcfg');\nvar config = envcfg(__dirname + '/path/to/config_module');\n```\n\n```javascript\nmodule.exports = exports = {\n\t\"*\": {\n\t\t\"foo\": \"foo-*\",\n\t\t\"buz\": \"buzz-*\"\n\t},\n\t\"development\": {\n\t\t\"bar\": \"bar-development\"\n\t},\n\t\"test\": {\n\t\t\"foo\": \"foo-test\",\n\t\t\"bar\": \"bar-test\"\n\t}\n}\n```\n\n## Programmatically\n*****\n\nIt is also possible to pass in a plain object.\n\n```javascript\nvar config = require('envcfg')({\n\t\"*\": {\n\t\t\"foo\": \"foo-*\",\n\t\t\"buz\": \"buzz-*\"\n\t},\n\t\"development\": {\n\t\t\"bar\": \"bar-development\"\n\t},\n\t\"test\": {\n\t\t\"foo\": \"foo-test\",\n\t\t\"bar\": \"bar-test\"\n\t}\n});\n```\n\n## Mutability\n*****\n\nEver have anyone muck around with your configuration settings? No worries, the object returned from `envcfg` cannot be tampered with. In strict mode exceptions will be thrown and in none-strict mode, they will be ignored.\n\n```javascript\n'use strict';\n\nvar config = require('envcfg')({\n\t\"*\": {\n\t\t\"foo\": \"foo-*\",\n\t\t\"buz\": \"buzz-*\"\n\t},\n\t\"development\": {\n\t\t\"bar\": \"bar-development\"\n\t},\n\t\"test\": {\n\t\t\"foo\": \"foo-test\",\n\t\t\"bar\": \"bar-test\"\n\t}\n});\n\n// throws on re-setting\nconfig.buzz = \"buzz off\"; // throws TypeError\n\n// throws on setting new values\nconfig.something_new = 'wtf'; // throws TypeError\n```\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gjohnson/envcfg/issues"
  },
  "homepage": "https://github.com/gjohnson/envcfg",
  "_id": "envcfg@0.1.1",
  "dist": {
    "shasum": "0b8406cb3465ffc78b2d4ab3ebb39d3d127358e1"
  },
  "_from": "envcfg@~0.1.0",
  "_resolved": "https://registry.npmjs.org/envcfg/-/envcfg-0.1.1.tgz"
}
